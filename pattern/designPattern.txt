생성패턴
- 클래스나 객체의 생성과 참조를 정의하는 패턴

1. 싱글톤 : 클래스 내에서 인스턴스가 하나뿐임을 보장한다.
2. 팩토리 : 객체생성을 서브 클래스에서 처리하도록 분리하된 캡슐화한 패턴
3. 추상팩토리 : 구체적 클래스를 의존하지 않고, 인터페이스를 통해 연관&의존하는 개체들의 그룹으로 생성하여 추상적으로 표현
4. 빌더 : 객체의 생성 과정과 표현 방법을 분리하여 표현하는 패턴
5. 프로토타입 : 원본 객체를 복제하는 방법으로 객체를 생성하는 패턴

구조패턴
- 클래스나 객체를 조합하여 더 큰 구조를 만드는 패턴

1. 어댑터 : 호환성이 없는 클래스의 인터페이스를 다른 클래스가 이용할 수 있도록 변환해주는 패턴
2. 브리지 : 구현부에서 추상층을 분리하여 서로가 독립적으로 확장할 수 있도록 구성하는 패턴 -> 기능과 구현을 별도 클래스로 구현
3. 컴포지트 : 객체를 '트리구조'로 구성하여 디렉터리 안에 디렉터리가 있듯이 복합 객체안에 복합객체가 포함되는 구조 패턴
4. 데코리에트 : 객체간의 결합을 통해 능독적으로 기능을 확장할 수있는 패턴
5. 퍼싸드 : 복잡한 서브 클래스들을 피해 더 상위 인터페이스를 구성함으로써 서브 클래스 기능을 간편하게 사용할 수 있게 해주는 패턴
         : 서브 클래스들 사이의 통합 인터페이스를 제공
6. 프록시 : 특정 객체로의 접근을 제어하는 대리인을 제공

행위패턴
- 클래스와 객체들이 상호작용하는 방법과 역할을 분담하는 방법을 다루는 패턴입니다.

