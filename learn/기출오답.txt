1. 관계대수 연산자
∪ : 합집합
- : 차집합
x : 카티션프로젝트
π(파이) : 프로젝트

2. 디자인 패턴

> 생성 패턴 = 객체 생성과 관련된 패턴
-★ singleton : 전역 접근 가능한 클래스 인스턴스 1개
-★ factory Method : 생성자 대신 대행 함수를 통해 객체 생성
- abstract factory: 관련있는 객체를 묶어서 생성
- prototype : 원본 복사하여 생성
-★ builder : 내부 클래스를 통해 간접적인 객체를 생성과

> 구조 패턴 = 객체를간의 관계, 결합하여 더 큰 구조를 만드는 패턴
- adapter : 호환하지 않는 클래스를 사용하기 위한 wrapper를 제공
-★ facade : 사용하기 쉽도록 인터페이스 제공
-★ bridge : 추상/구현을 분리
- composite : 객체간 관계를 트리구조로 부분-전체 계층을 표현
-★ decorator : 상황, 용도에 맞게 객체 기능을 추가/삭제
- flyweight : 동일/유사한 객체를 공유
-★ proxy : 대체 객체를 통한 작업 처리과정을

> 행위 패턴 = 객체들 상호작용하는 방법
-★ template method : 상위클래스(template), 하위클래스에서 오버라이딩
- command : 요청을 객체로 캡슐화, 추후 요청을 이용가능하도록(로깅, 실행지연, 저장 등)
-★ iterator : 컬렉션 내의 여러 자료형의 객체들을 순차적으로 접근
- mediator : 모든 클래스 상호작용을 캡슐화 하여 하나의 클래스에 위임(직접 통신 방지)
- memento : 객체 이전 상태 보관
-★ observer : 객체의 상태변화를 다른 객체에게 알려지도록 한다.
-★ state : 각 상태별로 클래스를 만든 후 상태전의 로직 구현(객체 상태 변화 용이)
- strategy : 실행 중 여러 알고리즘중 타입을 선택
-★ visitor : 데이터 구조와 연산을 분리하여, 구조를 변경하지 않고 새로운 연산 추가 가능
- chain of responsibility : 수행할 수 있을만한 객체까지 요청 전파
 

3. IP 네트워크/ 브로드캐스트 IP

4. 사회공학 / 다크데이터

5. 보안솔루션
- 방화벽 : 네트워크, 인터넷 간의 전송 정보 선별하여 침입 차단(내부에서 들어오는것은 엄밀히 체크 but 외부로 나가는것 그냥 통과)
- IDS(침입 탐지 시스템) : 컴퓨터 비정상적인 사용을 탐지
- 

6. TrustZone / typosquatting

7. 스케줄링(선점, 비선점)
- 비선점 = 이미 할당된 CPU 다른 프로세스가 빼앗을 수 없음
> FCFS : 들어온 순서대로
> SJF(shortest job first) : 실행 시간이 가장 짧은 순서대로
> HRN(hightest response-ration next) : 응답 시간이 가장 빠른 순서대로
응답시간 = (대기 + 서비스 시간) / 서비스 시간

- 선점 = 이미 할당된 CPU를 다른 프로세스가 뺏을 수 있음 
> RR : FCFS + 선점
> SRT : SJF + 선점

8. UML 
★ 구성요소 : 사물,관계,다이어그램
★ 관계
- 일반화(generalization) : 부모 자식 관계
- 실체화(realization) : 인터페이스 구현 클래스
- 의존(dependency) : 어떤 클래스가 다른 클래스를 참조
- 연관(association) : 어떤 클래스가 다른 클래스에 제공하는 기능을 사용
- 집합(aggregation) : 어떤 클래스안에 어떤 클래스가 있을 떄 ex> user안에 address 클래스

9. E-R다이어그램

-----------
2021/02

1. 정규화

3. 트랜잭션

- 원자성 : 트랜잭션의 연산이 모두 반영되거나, 전현 반영되지 않아야한다.
- 일관성 : 트랜잭션의 실행이 완료되면 언제나 일관성있는 데이터베이스 상태로변해야한다.
- 지속성 : 완료된 트랜잭션의 결과는 영구적으로 반영
- 독립성 : 둘 이상의 트랜잭션이 동시에 병행 실행되는 경우 중간에 끼어들 수 없다.

4. AES

5. 화이트 박스 검증 기준
- 구문 커버리지 : 최소 한번 모든 문장 수행
- 결정 커버리지 : 전체 조건 별로 true/false 수행
- 조건 커버리지 : 전체 조건식과 상관 없이 모든 조건식 true/false

6. 응집도

7. 데이터 교환방식

ⓐ 회선 교환
: 데이터 교환하기 전에 물리적 회선을 설정하고 해당 회선을 독점
: TDM. TSI

ⓑ 메세지 교환
: 메세지 전체를 한 노드에서 다음 노드로 축적 후 전송
: 패킷 교환으로 대체

ⓒ 패킷 교환
: 메세지를 패킷이라는 작은 단위로 쪼갠 후 주소를 붙여서 전송
: 가상회선, 데이터그램

★ 가상회선 : 패킷이 전송되기 전에 송수신 측 간에 논리적 회선을 설정하고
★ 데이터그램 : 데이터를 몇개의 패킷으로 쪼갠 후 헤더를 붙여 개별적으로 전달(비연결형 교환방식)

8. 디자인패턴

9. 병행제어기법
: 다중 프로그램의 이점을 활용해 여러 트랜잭션을 병행 수행할 때 동시에 실행되는 트랜잭션들이 
  데이터베이스의 일관성을 파괴하지 않게 트랜잭션의 상호작용을 제어

: 문제점 
>> 갱신분실 : 갱신 결과 일부 누락
>> 비완료 의존성 : 하나의 트랜잭션이 수행이 실패하고 회복하기 전에 다른 트랜잭션이 참조
>> 모순성 : 두 트랜잭션이 병행 수행될때, 원치 않은 자료를 이용함
>> 연쇄복귀 : 병행 수행되는 트랜잭션중 하나가 문제가 생겨 롤백 하는 경우 다른 트랜잭션도 함께 롤백

★ 로킹
: 접근한 데이터에 대한 연산을 모두 마칠 때 까지 상호배제하는 기법
: 로킹단위(= 병행 제어에서 한꺼번에 로킹할 수 있는 데이터단위)
: 로킹 단위가 커지면 관리하기 쉽지만 병행성 수준 낮아짐
: 로킹 단위가 작아지면 관리하기 복잡하지만 병행성 수준 높아짐

10. 럼바우 데이터 모델링
- 객체 모델링(Object Modeling) : 객체들 간의 관계를 정의, 객체 다이어그램(ERD)
- 동적 모델링(Dynamic Modeling) : 시간의 흐름에 따라 객체들 사이의 제어 흐름, 상태 다이어그램
- 기능 모델링(Functional Modeling) : 프로세스 자료 흐름을 중심으로 처리과정을 표현, 자료 흐름도(DFD)

순서 : 객 > 동 > 기

11. 상향식/하향식 테스트

---------
2021/01

1. 네트워크 프로토콜

2. WSDL
: WSDL은 웹 서비스를 설명하기 위한 XML 표기법

3. 소프트웨어 테스트
★★ 단위 > 통합 > 시스템 > 인수

4. IPC
: 프로세스 간 통신 규칙

▶ 기법
- 공유 메모리 : 프로세스들이 고유 메모리 영역을 통해 데이터 교환방식
- 메세지 전달 : 프로세스 간에 메세지 교환방식
- 메세지큐
- 파이프
- 소켓

  
5. EAI

- EAI
: 각종 어플리케이션 및 플랫폼간의 정보 전달, 연계, 통합 등 상호 연동이 가능하게 해주는 솔류션
: 종류 >> point-to-point, hub&spoke, Message bus, hybrid

>> EAI 종류
- point-to-point : 가장 기본적인 애플리케이션 통합 방식, 어플리케이션을 1:1로 연결
- hub&spoke : 단일 접점인 허브 시스템을 통해 데이터를 전송하는 중앙 집중형 방식
- message bus : 어플리케이션 사이에 미들웨어를 두어 처리하는 방식
- hybrid : 그룹 내에서는 hub&spoke방식을, 그룹간에는 message bus 방식을 사용

6. ★ 데이터 모델 구성요소
- 구조
- 연산
- 제약조건

7. 데이터베이스 접근 통제
- DAC(임의 접근 통제)
: 데이터에 접근하는 사용자의 신원에 따라 접근 권한을 부여
: 데이터 소유자가 접근통제 권한을 지정하고 제어함

- MAC(강제 접근 통제)
: 주체와 객체의 등급을 비교하여 접근 권한을 부여
: 시스템이 접근통제 권한 지정

- RBAC(역할 기반 접근통제)
: 사용자의 역할에 따라 접근 권한을 부여
: 중앙관리자가 접근 통제 권한 지정

8. 결합도
★ 결합도 (아래로 갈수록 결합도 높음)
- 자료 결합도(Data Coupling) : 모듈 간의 인터페이스가 자료 요소로만 구성되어 있다.
- 스탬프 결합도(Stamp Coupling) : 모듈 간의 인터페이스가 배열이나 레코드 등의 자료구조가 전달될 때 결합도
- 제어 결합도(Control Coupling) : 어떤 모듈이 다른 모듈 내부의 논리적 흐름을 제어하기 위해 제어 신호를 주고받거나 제어 요소를 전달
- 외부 결합도(Exteranl Coupling) : 어떤 모듈이 선언한 데이터를 외부의 다른 모듈에서 참조할 때의 결합도
- 공유 결합도(Common Couping) : 공유되는 공통 데이터 영역(=전역변수)를 여러 모듈이 사용할 때의 결합도
- 내용 결합도(Content Couping) : 한 모듈이 다른 모듈의 내부 기능 및 그 내부 자료를 직접 참조하거나 수정
