시나공 핵심 키워드

1. 애자일
: 시제품을 끊임 없이 제작하며 사이클을 반복하는 개발 방법론, 고객의 변화하는 요구사항과 환경 변화에 능동적인 소프트웨어 개발론

2. 리팩토링 정의
: 리팩토링의 목적은 프로그램을 쉽게 이해하고 수정하여 빠르게 개발할 수 있도록 하기 위함

3. 요구사항
> 기능 요구사항 : 시스템이 반드시 수행해야하는 기능
> 비기능 요구사항 : 품질, 제약사항과 관련된 요구사항

4. UML 
: 시스템 개발 과정에서 시스템 개발자와 고객 상호 간의 의사소통이 원할하게 이루어지도록 표준화한 대표적인 객체지향 모델링 언어

> 특징  
- 관계 : 사물과 사물사이의 연관성을 표현
- 클래스 : UML에 표현되는 사물 하나로 객체가 가지는 속성과 동작을 표현한다.
- 인터페이스 : 클래스나 컴포턴트의 동작을 모아놓은 것, 외부적으로 가시화되는 행동을 표현

> 관계
- 일반화(generalization) : 상속
- 실체화(realization) : 추상 메서드 오버라이딩
- 의존(dependency) : 참조하는 객체가 사용후 사라짐
- 연관(association) : 참조하는 객체가 사용후 유지
- 집합(aggregation) : 포함되는 관계 

종류 > 
- 클래스 다이어그램 : 객체들을 클래스로 추상화하여 표현하는 다이어그램으로 대표적인 구조적 다이어그램
- 패키지 다이어그램 : 

5. 비용산정 기법
- 하향식 : 경험많은 전문가들이 회의로 비용 산전
>> 델파이(한명 조정자, 여러명 전문가)

- 상향식 : 프로젝트 세부적인 작업 단위별로 비용 산정 후 전체 집계
>> LOC(원시 코드 라인 수)  : 프로그램 라인 수를 평가하여 비용을 산정
개발기간 = 인월 / 투입인원
개발비용 = 인월 / 단위비용
인월(= LOC) = 개발기간 * 투입 인원 
생산성 = LOC * 투입인원

>> COCOMO : 보헴이 제안한 원시 프로그램 규모에 따른 비용 산정

6. 스키마 : 외부 내부 개념

7. 슈퍼키, 후보키

8. 관계해석
: 관계 데이터의 연산을 표현하는 방법으로, 원하는 정보를 정의할 때는 계산 수식을 사용한다.
: 튜플 관계해석, 도메인 관계해석
: 연산자 : or, and, not 

8. 이상현상
: 데이터 중복으로 테이블 조작시 발생하는 문제를
> 종류 : 삽입 이상, 삭제 이상, 갱신 이상

9. 트랜잭션 특성
- 원자성 : 연산은 데이터베이스 모두 반영되던가 모두 롤백되던가
- 일관성 : 실행을 성공적으로 완료하면 언제나 일관성 있는 데이터베이스 상태로 변환
- 독립성 : 둘 이상의 트랜잭션이 동시에 병행되는 경우 어느 하나의 트랜잭션이 실행중에 다른 트랜잭션의 연산이 끼어들 수 없다.
- 지속성 : 성공적으로 완료된 트랜잭션의 결과는 영구적으로 반영되어야 한다.

> 격리수준
- read Uncommited : 커밋되기 전에도 내용을 볼 수 있음
- read commited : 커밋이 완료된 후에 내용을 볼 수 있음
- repeatable read : 동일 트랜잭션 내에서는 한번 select한 값은 다시 select해도 트랜잭션이 종료시까지 같은 값 출력을 보장
- serializable : 순서대로 처리가


10. 함수의 종속

ex>> 학생
 학번  |  이름  | 학년 | 학과
 10  | 이순신  |  4  | 컴퓨터공학과
 15  | 유재석  |  3  | 미디어학과
 30  | 강호동  |  3  | 미디어학과
 32  | 홍길동  |  2  | 체육과
 
 학생 테이블에서 이름, 학년, 학과는 각각 한번 함수적 종속이다. (학번 : 결정자, 이름 : 종속자)
 
 ⓐ.
 학번 -> 이름
 학번 -> 학년
 학번 -> 학과
 
 ⓑ.
 학번 -> 이름, 학년, 학과
 
 ex> 수강
  학번  |  과목번호 | 성적 | 학년 
 10    |  C413  |  A  | 4
 15    |  C422  |  B  | 3
 30    |  E566  |  C  | 3
 32    |  A233  |  B  | 2
 
 학번, 과목 -> 성적 : 완전함수 종속
 학번 -> 학년 : 부분함수 종속
 
 
 11. 정규화
 

10. 재해복구 시스템
- RTO (복구목표시간) : 재해로 인하여 서비스가 중단되었을 때, 서비스를 복구하는데 까지 걸리는 시간
- RPO (복구목표시점) : 재해로 인하여 중단되 서비스를 복구하였을 때 유식을 감내할 수 있는 데이터의 손실 허용시점
- REDO : 장애가 발생하기 전 DB로 복구하는 기법으로 디스크에 저장된 로그를 분석하여 트랜잭션의 시작과 완료에 대한 기록이 있는
         트랜잭션을 재실행하는기법
- UNDO : 장애시 디스크에 저장된 로그를 분석하여 트랜잭션의 시작과 완료가 기록이 없는 트랜잭션에 대한 작업변경 내용을 모두 취소하는 기법

11. 데이터베이스 보안
★ 접근통제 기술
- DAC (임의 접근통제) 
: 데이터에 접근하는 사용자의 신원에 따라 접근 권한을 부여
: 데이터 소유자가 접근통제 권한을 지정하고 제어함

- MAC (강제 접근통제) 
: 주체와 객체의 등급을 비교하여 접근 권한을 부여
: 시스템이 접근통제 권한을 지정함

- RBAC (역할 기반 접근통제)
: 사용자의 역할에 따라 접근 권한을 부여하는 방식
: 중앙관리자가 접근통제 권한을 지정하고

12. xml
: w3c에서 개발된 특수한 목적을 가진 마크업 언어
: 원할한 데이터의 연계를 위해 송수신 시스템 간에 전송되는 데이터가 동일한 구조로 구성될 수 있도록 형태를 정의하는 역할 수행

13. SOAP
: http, https, smtp 등을 사용하여 xml 기반의 메세지를 네트워크상에서 교환하는 프로토콜

14. WSDL
: 웹 서비스와 관련된 서식이나 프로토콜 등을 표준적인 방법으로 기술하고 게시하기 위한 언어

15. 럼바우 객체지향 분석기법
- 객체지향 모델링(Imformation) : 객체 다이어그램, 객체간의 관계를 정의
- 동적 모델링(Dynamic) : 상태 다이어그램, 시간에 흐름에 따라 객체들 사이의 제어 흐름,동작 순서등 정의
- 기능 모델링(Function) : 자료 흐름도(DFD), 자료 흐름을 중심으로 처리 과정 표현

>> 절차 : 객체 -> 동적 -> 기능

16. 객체지향 설계원칙(SOLID)
- SRP (단일 책임 원칙) : 모든 클래스는 각각 하나의 책임만 가져야 한다.
- OCP (개방-폐쇄 원칙) : 확장에는 열려있고 수정에는 닫혀있어야한다.
- LSP (라스코프 치환 원칙) : 자식 클래스는 언제나 자신의 부모 클래스를 대체할 수 있다.
- ISP (인터페이스 분리 원칙) : 한 클래스는 자신이 사용하지 않는 인터페이스는 구현하지 말아야한다.
- DIP (의존 역전 원칙) : 구체적인 클래스보다는 인터페이스나 추상 클래스와 관계를 맺어라

★ oop 특징
- 추상화 
- 상속
- 다형성 
- 캡슐화 : 속성과 메서드를 하나의 단위로 묶는 것을 의미
- 정보 은닉 : 외부에서 속성에 접근하지 못하도록


17. 모듈 독립성
: 모듈의 독립성 = 결합도는 낮을 수록 응집도는 높을 수록 독립성이 높아진다.

★ 결합도 (아래로 갈수록 결합도 높음)
- 자료 결합도(Data Coupling) : 모듈 간의 인터페이스가 자료 요소로만 구성되어 있다.
- 스탬프 결합도(Stamp Coupling) : 모듈 간의 인터페이스가 배열이나 레코드 등의 자료구조가 전달될 때 결합도
- 제어 결합도(Control Coupling) : 어떤 모듈이 다른 모듈 내부의 논리적 흐름을 제어하기 위해 제어 신호를 주고받거나 제어 요소를 전달
- 외부 결합도(Exteranl Coupling) : 어떤 모듈이 선언한 데이터를 외부의 다른 모듈에서 참조할 때의 결합도
- 공유 결합도(Common Couping) : 공유되는 공통 데이터 영역(=전역변수)를 여러 모듈이 사용할 때의 결합도
- 내용 결합도(Content Couping) : 한 모듈이 다른 모듈의 내부 기능 및 그 내부 자료를 직접 참조하거나 수정

★ 응집도 (아래로 갈수록 응집도 낮음)
- 기능적 응집도 : 모듈 내부의 모든 기능 요소들이 단일 문제와 연관
- 순차적 응집도 : 모듈 내 하나의 활동으로 부터 나온 출력 데이터를 그 다음 활동의 입력 데이터로 사용하는 경우
- 교환적 응집도 : 동일한 입력과 출력을 사용하여 서로 다른 기능을 수행하는 경우
- 절차적 응집도 : 모듈 안의 구성요소들이 그 기능을 순차적으로 수행하는 경우
- 시간적 응집도 : 특정 시간에 처리되는 몇개의 기능을 모아서 작성할 경우
- 논리적 응집도 : 유사한 성격을 갖거나 특정 형태로 분류되는 처리 요소를 모아 작성하는 경우
- 우연적 응집도 : 모듈 내 구성요소들이 서로 관련 없는 요소로만 구성되어 있는 경우

18. Fan-In, Fan-Out
- Fan-In : 자신을 사용하는 모듈의 수 
- Fan-Out : 자신이 호출하는 모듈의 수
※ 상위 모듈의 자식 모듈을 호출한다.

19. IPC
: 프로세스들 사이에 서로 데이터를 주고받는 행위
: 공유 메모리, 소켓, 세마포어, 파이프와 네임드 파이드 등 

20. 디자인 패턴 ★★★
★ 생성패턴 : 객체 생성과 관련된 패턴
- 싱글톤 : 하나의 클래스 인스턴스를 전역에서 접근 가능하게 하면서 해당 인스턴스가 한번만 생성되도록 보장
- 팩토리 메서드 패턴: 객체를 생성하기 위한 인터페이스를 정의하고, 서브 클래스에서 어떤 클래스의 인스턴스를 생성할지 결정하는 패턴
- 추상 팩토리 패턴 : 관련 객체들의 집합을 생성하는 인터페이스를 제공하며, 구체적인 팩토리 클래스를 통해 객체 생성을 추상화하는 패턴이다.
- 빌더 패턴: 복잡한 객체의 생성 과정을 단순화 하고 객체를 단계적으로 생성하는 패턴
- 프로토타입 패턴: 객체를 복제하여 새로운 객체를 생성하는 패턴, 기존 객체를 템플릿으로 사용하는 패턴

★ 구조 패턴 = 클래스&객체를 조합하여 더 큰 구조를 만드는 패턴
- 어댑터 패턴 : 인터페이스 호환성을 제공하지 않는 클래스를 사용하기 위해 래퍼를 제공하는 패턴
- 브릿지 패턴 : 추상화와 구현을 분리하여 두 가지를 독립적으로 확장 가능하게 하는 패턴이다
- 컴포지트 패턴 : 개별객체와 복합 객체를 동일하게 다루어 -> 트리 구조 객체를 구성되어
- 데코레이트 패턴 : 객체에 동적으로 새로운 기능을 추가하여 객체를 확장할 수 있는 패턴
- 퍼사드 패턴 : 서브시스템을 더 쉽게 사용할 수 있도록 인터페이스를 제공하는
- 프록시 패턴 : 다른 객체에 대한 대리자를 제공하여 접근 제어, 지연 로딩 등을 구현을

★ 행위 패턴 = 객체나 클래스 사이의 알고리즘이나 책임 분배에 관련된 패턴이다
- 옵저버 패턴 : 객체간의 일대다 종속관계를 정의하여 한 객체의 상태 변경을 다른 객체에게 알려지도록 한다.
- 스트레티지 패턴 : 알고리즘을 정의하고 실행중에 타입을 선택할 수 있다.
- 커맨드 패턴 : 요청을 객체로 캡슐화하여 요청을 매개변수화 하고, 요청을 큐에 저장하고 로깅하고 실행을 지연시킨다
- 스테이트 패턴 : 객체 상태를 캡슐화 하고 상태 전환을 관리자에
- 중재자 패턴 : 객체 간의 상호작용을 캡슐화하여 객체간의 직접적인 통신을 방지
- 탬플릿 메서드 패턴 : 알고리즘을 정의하면서 하위 클래스에서 각 단계의 구현을 제공
- 이터레이터 패턴 : 컬렉션내의 요소들에 접근하는 방법을 표준화하여 컬렉션 내부 구조에 독립적으로 접근

21. EAI
: 각종 어플리케이션 및 플랫폼간의 정보 전달, 연계, 통합 등 상호 연동이 가능하게 해주는 솔류션
: 종류 >> point-to-point, hub&spoke, Message bus, hybrid

22. EAI 종류
- point-to-point : 가장 기본적인 애플리케이션 통합 방식, 어플리케이션을 1:1로 연결
- hub&spoke : 단일 접점인 허브 시스템을 통해 데이터를 전송하는 중앙 집중형 방식
- message bus : 어플리케이션 사이에 미들웨어를 두어 처리하는 방식
- hybrid : 그룹 내에서는 hub&spoke방식을, 그룹간에는 message bus 방식을 사용

23. 보안 프로토콜
- IPSec : 네트워크계층에서 무결성과 인증을 보장하는 인증헤더와 기밀성을 보장하는 암호화를 이용하여 종단 간의 보안 서비스 제공
- SSL/TLS : 전송계층과 응용계층 사이에 클라이언트 서버간의 웹 데이터 암호화, 상호 인증 및 전송 시 데이터 무결성을 보장
- S-HTTP : 클라이언트와 서버 간의 모든 메세지를 암호화하여 전송하는 프로토콜

24. 살충제 페러독스
: 동일한 테스트 케이스로 동일한 테스트를 반복하면 더 이상 결함이 발견되지 않는다.

25. 테스트 분류
- 정적 테스트 : 프로그램을 실행 X,
             : 코딩 표준, 코딩 스타일, 코드 복잡도 등을 발견하기 위해서 실시하는
- 동적 테스트 : 프로그램을 실행 o
             : 소프트웨어 개발의 모든 단계에서 수행
             ex = 블랙박스, 화이트 박스


26. 화이트박스 검증 기준 ★★★
- 구문 검증 : 최소한 모든 문장이 수행되도록 구성하는 검증
- 결정 검증(= 분기 검증) : 조건식이 참/거짓일 때 수행되도록 검증
- 조건 검증 : 조건식에 관계 없이 개별 조건이 참/거짓일 때 수행되도록 검증
- 조건/결정 : 다른 조건식과 무관하게 분기를 결정하는 개별 조건식의 true, flase 결과가 되도록 수행
- 다중 조건 : 결정 조건 내 모든 개별 조건식의 모든 가능항 조합을 100% 보장


27. 블랙박스 테스트
- 동치 분할 분석(= Equivalence Partitioning) : 입력값을 넣고 예상된 출력값이 나오는지 실제값과 비교하는 명세 기반 테스트
- 경계값 분석(= Boundary value Analysis) : 중간값 보다 경계값에서 오류가 많이 발생한다는 점을 이용하여 입력조건의 경계값을 테스트
- 오류 예측 검사 :테스터의 과거 경험이나 확인자의 감각으로 테스트
- 비교 검사 : 여러 버젼의 프로그램에서 동일한 테스트 자료를 제공하여 동일한 결과가 나오는지 테스트
- 원인 결과 그래프(= Cause effect Graph) : 그래프를 활용하여 입력 데이터간의 관계 출력에 영향을 미치는 상황을 체계적으로 분석한 다음
                                          효용성이 높은 테스트 케이스를 선정

28. 테스트 순서
: 단위 > 통합 > 시스템 > 인수

- 단위 테스트 
: 모듈이나 컴포넌트에 초점
: 구조 기반 테스트, 명세 기반 테스트

- 통합 테스트
: 단위 테스트가 완료된 후 모듈들을 결합하여 하나의 시스템으로 완성시키는 과정에서의 테스트
: 모듈, 컴포넌트간의 상호작용을 테스트

- 시스템 테스트
: 개발된 소프트웨어가 완벽하게 수행되는 가를 점검하는 테스트

- 인수 테스트
: 사용자의 요구사항을 충족하는지 중점을 두고 테스트
: 알파(조직 내부 인원), 베타(실제 사용자) 테스트

29. 통합 테스트

☆ 하향식 통합 테스트
: 상위 모듈 -> 하위 모듈 방향으로 통합
- 종류 
:깊이 우선 통합 = 주요 제어 모듈 중심으로 해당 모듈에 종속된 모든 모듈 통합
: 넓이 우선 통합 = 구조의 수평을 중심으로 해당 모듈을 통합
- 절차
: 주요 제어 모듈은 작성된 프로그램 사용, 종속 모듈은 스텁으로 대체
※ 스텁 : 제어 모듈이 호출하는 타 모듈의 기능을 단순히 수행하는 도구, 일시적으로 필요한 조건만을 가지고있는 시험용 모듈

☆ 상향식 통합 테스트
: 하위 모듈 -> 상위 모듈 방향으로 통합
- 절차
: 하위모듈들을 클러스터로 결합
: 상위 모듈에서 데이터의 입출력을 확인하기위해 더미 모듈인 드라이버작성
※ 드라이버 : 테스트 대상의 하위 모듈을 호출하고, 파라미터를 전달하고, 모듈 테스트 수행 후 결과를 도출하는 도구

30. 테스트 목적에 따른 분류
- 회복(recovery) : 시스템을 고의로 실패를 유도 후 시스템 정상 복귀여부 테스트가
- 안전(security) : 소스 코드내의 보안적인 결함을 테스트
- 성능(perfomance) : 시스템이 응답하는 시간, 특정시간안에 처리량, 요구 사항에 반응하는 속도 등을 테스트
- 구조(structure) : 시스템 내부의 논리, 복잡도 등을 평가
- 회기(refression) : 시스템의 변경 또는 수정된 코드에 새로운 결함이 없음을 확인
- 병행(parallel) : 변경된 시스템과 기존의 시스템이 동일한 데이터를 입력 한 후 결과를 비교

31. 테스트 오라클
: 테스트 결과가 참인지 거짓인지 판단하기 위해 사전에 정의된 참값을 비교하는 기법


32. 어플리케이션 성능
- 처리량 : 일정 시간내에 처리하는 일의 양
- 응답시간 : 요청을 전달하는 시점부터 응답이 도찰할 때 까지 걸린 시간
- 경과시간 : 작업을 의뢰한 시점부터 처리가 완료될 때 까지 걸린 시간
- 자원활용률 : 작업을 처리하는 동안 cpu, memory, network 등 자원 사용률

33. 암호화 알고리즘
- IDEA : 라이와 메시가 개발, 128비트의 키를 사용하고 64비트 블록 암호화하는 알고리즘
- Skipjack : NSA에서 개발, 클리퍼 칩이라는 IC칩이 내장, 주로 전화와같은 음성통신 장비에 사용

34. TKIP
: 무선 보안에 사용되는 웹 방식을 보안하기위한 데이터 보안 프로토콜

35. DES
: IBM이 개발, NBS에서 미국의 국가 표준으로 발표된 암호화 알고리즘
: 블록 64bit, 키 56bit

36. AES
: NIST(미국 표준 기술 연구소)에서 개발한 대칭키 암호화 알고리즘
: 블록 128bit, 키 [ 128, 192, 256 ]bit

37. MD5
: MD4를 개선한 암호화 알고리즘

38. 암호화 알고리즘
> 블록 암호 방식
- DES : 미국의 연방 표준국(NIST)이 발표한 알고리즘, 블록 크기는 64bit,키 길이는 56bit
- SEED : 한국인터넷진흥원(KISA)에서 개발한 알고리즘, 블록 크기는 128bit, 키길에 따라 128bit, 256 bit
- AES : 미국 표준 기술 연구소(NIST)에서 발표한 알고리즘, DES 개별 전사 공격 가능
- IDEA : DES를 대체하기 위한 스위스 개발 알고리즘
- RC4 : 스트림 암호 방식
 
> 비대칭키 암호 방식
- 디피-헬만 : 최초의 공개키 알고리즘, 이산대수의 어려운 문제 기본 원리
- RSA : MIT 수학 교수가 고안한 소인수 분해 어려움을 이용한 알고리즘
- ECC : 타원 곡선 암호는 이산대수의 문제에 기초한 알고리즘
- Elgamal : 이산대수의 계산을 기본 원리로 하고 RSA와 유사하게 전자서명 암,복호화에 사용

> 해시 암호 방식
- MD5 : 파일의 무결성 검사에 사용
- SHA-1 : NSA의 표준이고 DSA에서 사용
- SHA-256/384/512 : AES의 키 길이에 대응하도록 출력 길이를 늘린 알고리즘
- HAS-160 : 국내 표준 서명 알고리즘 KCDSA를 위해 개발

> 네트워크 암호화 전송
- IPSec  :  IP 계층(3계층)에서 무결성과 인증을 보장하는 인증 헤더(AH)와 기밀성을 보장하는 암호화(ESP)를 이용한 IP 보안 프로토콜
- SSL/TLS : 전송계층(4계층)과 응용계층(7계층) 사이에서 클라이언트와 서버 간의 웹 데이터 암호화(기밀성), 상호 인증 및 전송 시 데이터 무결성을 보장하는 프로토콜
- S-HTTP : 웹상에서 네트워크 트래픽을 암호화하는 주요 방법 중 하나로, 클라이언트와 서버 간 모든 메시지를 암화하하여 전송 



39. 라우팅 프로토콜
- 정적 : 관리자에 의해 라우팅 테이블이 유지 관리
- 동적 : 라우팅프로코롤에 의해 자동으로 라우팅 테이블을 관리
>> 내부(IGP)
IGP : 내부 라우팅 프로토콜 (inner group protocol)
EGP : 외부 라우팅 프로토콜(external group protocol)
RIP : 최소 hop count를 파악하여 라우팅하는 프로토콜
      : distance vectior 알고리즘 사용
      : hop count는 15로 짧기 때문에 내부 라우팅 프로토콜로 많이 사용BGP : 외부 라우팅 프로토콜로 AS(관리 도메인)과 AS간의 라우팅 프로토콜
        : distance vectior 알고리즘 사용
OSPF : 최단 경올 우선 프로토콜
         : SPF 알고리즘 사용
		 

40. SSO (single sign on)
: 한번의 로그인으로 개인이 가입한 모든 사이트를 이용할 수 잇게 해주는 시스템과

41. Ad-hoc network
: 재난 및 군사 현장과 같이 별도의 유선망을 구축할 수 없는 장소에서 모바일 호스트만을 이용하여 구성한 네트워크

42. NAT(network address translation)
: '네트워크 주소 변환' 이란 의미의 3글자 약자
: 1개의 정식 IP주소에 다량의 사설 IP주소를 할당 및 연결하는 방식

43. 경로제어 프로토콜
: 송수신 측 간의 전송 경로중에서 최적 패킷 교환 경오를 결정하는 기능을

- IGP(interior gateway protocol)[내부 게이트웨이 프로토콜] : 하나의 자율 시스템내의 라우팅에 사용되는 프로토콜로
  >> RIP : 가장 널리 사용되는 프로토콜, 거리 벡터 라우팅 프로토콜
  >> OSPF : RIP단점을 해결하요 새로운 기능 지원, 다익스트라 알고리즘
- EGP (Exterior Gateway Protocol)[외부 게이트웨이 프로토콜] : 자율 시스템간의 라우팅
- BGP (Border Gateway Protocol) : 자율 시스템간의 라우팅 프로토콜, EGP 단점 보완

44. 블록체인
: P2P 네트워크, 디지털 장비에 분산 저장

45. ISMS 
: 정보 자산을 안전하게 보호하기 위한 보호 절차와 대책, 정보보호 관리체계
  
		 
XX. 신기술

>> SW 관련 신기술

- 블록체인 : P2P 네트워크, 디지털 장비에 분산 저장
- 매시업 : 웹에서 제공하는 정보 및 서비스를 이용하여 새로운 SW나 서비스, DB를 만드는 기술
- 서비스 지향 아키텍처(SOA) : 기업의 SW 인프라인 정보 시스템을 공유와 재사용이 가능한 서비스 단위나 컴포넌트 중심으로 구축하는 정보기술 아키텍처
                         SOA 기반 애플리케이션 구성 계층 : 표현, 업무 프로세스, 서비스 중간, 애플리케이션, 데이터 저장
- 디지털 트윈 : 현실 속의 사물을 소프트웨어로 가상화한 모델
- 그레이웨어 : 애드웨어나 트랙웨어, 기타 악성 코드나 악성 공유웨어처럼 제공자 입장에선 유용, 사용자 입장에선 아닐 수도
- 양자 암호 키 분배(QKD) : 양자 통신을 위해 비밀키를 분배하여 관리, 두 시스템이 각자 양자 암호 키 분배 시스템을 설치하여 운용하는 식으로 활용
- 서비스형 소프트웨어(SaaS) : SW의 여러 기능 중에서 사용자가 필요로 하는 서비스만 이용할 수 있도록 한 SW
- 리치 인터넷 애플리케이션(RIA) : 신개념 플래시 웹 페이지 제작 기술(플래시 애니메이션 기술 + 웹 서버 애플리케이션 기술)

>> HW 관련 신기술

- 엔 스크린(N-Screen) : N 개의 서로 다른 단말기에서 동일한 콘텐츠를 자유롭게 이용할 수 있는 서비스
- 신 클라이언트 PC(Thin Client PC) : HDD나 주변장치 없이 기본적인 메모리만 갖추고 서버와 네트워크로 운용되는 PC 서버 기반 컴퓨팅과 관련 깊음
- 엠디스크(M-DISC) : 한 번의 기록만으로 자료를 영구 보관할 수 있는 광 저장장치
- 멤스(MEMS) : 초정밀 반도체 제조 기술을 바탕으로 센서, 액추에이터 등 기계 구조를 다양한 기술로 미세 가공하는 초미세장치
- 멤리스터 : 메모리+레지스터, 전류의 방향과 양 등 기존의 경험을 모두 기억하는 특별한 소자
- 트러스트존 기술 : 하나의 프로세서 내 일반 구역과 보안이 필요한 보안 구역으로 분할하여 관리하는 HW 기반 보안 기술
- RAID : 2개 이상의 하드디스크로 디스크 배열 구성, 데이터 블록을 서로 다른 디스크에 분산 저장하거나 다중화
- Secure OS : 보안 기능을 갖춘 커널을 이식한 보안형 OS

- 보안 커널 : TCB(Trusted Computing Base)를 기반으로 참조 모니터의 개념을 구현하고 집행
- 보안 기능 : 식별 및 인증, 임의적/강제적 접근 통제, 객체 재사용 보호, 완전한 조정 등

>> DB 관련 신기술

- 하둡 
: 오픈 소스 기반한 분산 컴퓨팅 플랫폼
: 구글 맵리듀스 엔진 사용
: 더그 커팅과 마이크 캐퍼렐라 개발
: 자바 소프트웨어 프레임워크
- 맵리듀스 
: 대용량 데이터를 분산처리하기 위한 목적으로 개발된 프로그래밍 모델
: 흩어져 있는 데이터를 연관성 있는 데이터 분류로 묶는 MAP 작업 수행 후중복 데이터 제거 & 원하는 데이터 추출하는 Reduce 수행
-데이터 마이닝 : 대량의 데이터를 분석하여 데이터에 내재된 변수 사이의 상호관계를 규명하여 일정한 패턴을 찾아냄
-타조 : 아파치 하둡 기반의 분산 데이터 웨어하우스 프로젝트
-OLAP : 다차원으로 이루어진 데이터로부터 통계적인 요약 정보를 분석하여 의사결정에 활용하는 방식
-브로드 데이터 : 다양한 채널에서 소비자와 상호 작용을 통해 생성된 효율적이고 다양한 데이터
-회복 : DB가 손상되었을 때 손상되기 이전 상태로 복구하는 작업

-REDO : 트랜잭션의 시작과 완료에 대한 기록이 있는 작업들을 재작업.
-UNDO : 트랜잭션의 완료 기록은 없는 트랜잭션들이 작업한 변경 내용을 모두 취소.
-연기 갱신 기법 : 실질적인 갱신을 연기. REDO만 가능.
-즉각 갱신 기법 : 트랜잭션이 갱신하면 부분 완료되기 전이라도 즉시 실제 DB에 반영. REDO, UNDO 모두 가능
-병행제어 : 동시에 실행되는 트랜잭션들이 DB의 일관성을 파괴하지 않도록 트랜잭션 간 상호 작용을 제어하는 것

- 로킹 : 액세스 하기 전 Lock(잠금)을 요청해서 Lock이 허락되어야만 그 로킹 단위를 액세스할 수 있도록 하는 기법

-- 주요 데이터 액세스를 상호 배타적으로 함
-- 로킹 단위 : 한꺼번에 로킹할 수 있는 객체의 크기
             로킹 단위가 크면 : 로크 수가 작아 관리 쉬움, 병행성 수준 낮음
             로킹 단위가 작으면 : 로크 수가 많아 관리 어려움, 병행성 수준 높음
-- 교착 상태(Dead Lock)은 서로 다른 프로세스가 점유하고 있는 자원을 요구하며 무한정 기다림
   상호 배제 : 한 번에 한 개의 프로세스만 공유 자원 사용 가능
   점유와 대기 : 하나를 이미 갖고 있으면서 또 하나를 추가로 점유하기 위해 대기하는 프로세스
   비선점 : 사용 끝날 때까지 강제로 뺏기 불가
   환형 대기 : 대기하는 프로세스들이 원형으로 구성, 점유와 대기 중 앞 혹은 뒤 프로세스 자원을 요구해야 함
-- 이상이 필요충분 조건으로 필요
-- 해결 방법
   예방 기법 : 조건 중 하나를 제거함으로써 수행
   회피 기법 : 주로 은행원 알고리즘이 사용
   발견 기법 : 교착 상태가 발생했는지 점검
   회복 기법 : 비선점을 선점으로 바꿔주거나, 교착 상태를 일으킨 프로세스를 종료
   타임 스탬프 순서 : 시간표(Time Stamp)를 부여하여 부여된 시간에 따라 트랜잭션 작업을 수행
   
  








