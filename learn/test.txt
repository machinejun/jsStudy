1. 어플리케이션 테스트 기본원리
- 완벽한 테스트 불가능
- 파레토 법칙 : 애플리케이션의 20%에 해당하는 코드에서 전체 결함의 80%가 발견된다.
- 살충제 페러독스 : 동일한 테스트 케이스로 동일한 테스트를 반복하면 더이상 결함이 발견되지 않는다.
- 테스트는 정황에 의존 : 소프트웨어 특징, 테스트환경, 테스터의 역략 등의 정황(context)에 따라서 테스트 결과가 달라질 수 있다.
- 오류-부재의 궤변 : 소프트웨어 결함을 모두 제거해도 사용자의 요구사항을 만족시키지 못한다면 해당 소프트웨어는 품질이 높다 할수 없음
- 테스트와 위험은 반비례
- 테스트의 점진적 확대

2. 테스트 분류

- 정적 테스트 
: 프로그램을 실행하지 않고 명세서나 소스 코드를 대상으로 분석
: 코딩 컨벤션, 코딩 스타일, 코드 복잡도 등을 발견하기 위해서 사용
: 워크스루, 인스펙션 등

※ 워크스루 : 소프트웨어 개발자가 모집한 전문가들이 개발자의 작업 내역을 검토
※ 인스펙션 : 워크스루에서 발전된 단계

- 동적 테스트
: 프로그램을 실행하여 오류를 찾음
: 소프트웨어 개발의 모든 단계에서 수행
: 블랙박스 테스트, 화이트 박스 테스트


★ 화이트박스 테스트
: 모듈의 원시 코드를 오픈시킨 상태에서 원시 코드의 논리적 모든 경로를 테스트하여 테스트 케이스를 설계하는 방법
: 모듈안의 작동을 직접 관찰
: 원시 코드의 모든 문장을 한번 이상 실행함으로써 수행된다.

- 종류 
○ 기초 경로 검사 : 테스트 케이스 설계자가 절차적 설계의 논리적 복잡성을 측정할 수 있게 해주는 테스트 기법
○ 제어 구조 검사 
   - 조건 검사 : 프로그램 모듈 내에 있는 논리적 조건을 테스트 하는 테스트 케이스 설계 기법
   - 루프 검사 : 프로그램 반복 구조에 초점을 맞춰 실시하는 테스트 케이스 기법
   - 데이터 흐름 검사 : 프로그램의 변수의 정의와 변수의 사용 위치에 초점을 맞춰 시행

☆☆ 화이트박스 테스트의 검증 기준 = 커버리지
- 구문 커버리지(= 문장 커버리지) : 프로그램 내의 모든 명령문을 적어도 한번 수행
- 결정 커버리지(= 선택 커버리지 or 분기커버리지) : 전체 수행에서 분기를 결정하는 모든 조건식을 수행
- 조건 커버리지 : 모든 조건식이 true, false가 되도록 수행
- 조건/결정 커버리지 : 다른 조건식과 무관한게 분기를 결정하는 개별조건식의 true, false 결과가 되도록 수행 
- 다중 조건 커버리지 : 결정 조건 내 모든 개별 조건식의 모든 가능한 조합을 100% 보장

☆ 블랙박스 테스트
: 소프트웨어가 수행할 특정 기능을 알기 위해서 각 기능이 완전히 작동되는 것을 입증하는 테스트 = 기능 테스트
: 사용자의 요구사항 명세서를 보면서 테스트
: 구현된 기능을 테스트

☆☆ 종류
1. 동치 분할 검사 : 입력조건에 타당한 입력 자료와 타당하지 않은 입력 자료의 개수를 균등하게 하여 테스트
                 : 동등 분할 기법
2. 경계값 분석 : 입력 조건의 중간값보다 경계값에서 오류가 발생될 확률이 높다는 점을 이용하여 입력 조건의 경계값을 테스트
3. 원인 - 효과 그래프 검사 : 입력 데이터간의 관계와 출력에 영향을 미치는 상황을 분석 후 효용성이 높은 테스트 케이스를 선정
4. 오류 예측 검사 : 테스터의 과거의 경험이나 확인자의 감각으로 테스트
5. 비교 검사 : 여러 버젼의 프로그램에 동일한 테스트 자료를 제공하여 동일한 결과가 출력되는지 테스트

3. 개발 단계의 따른 테스트
: 단위 테스트 -> 통합 테스트 -> 시스템 테스트 -> 인수 테스트

- 단위 테스트 
: 모듈이나 컴포넌트에 초점
: 구조 기반 테스트, 명세 기반 테스트

- 통합 테스트
: 단위 테스트가 완료된 후 모듈들을 결합하여 하나의 시스템으로 완성시키는 과정에서의 테스트
: 모듈, 컴포넌트간의 상호작용을 테스트

- 시스템 테스트
: 개발된 소프트웨어가 완벽하게 수행되는 가를 점검하는 테스트

- 인수 테스트
: 사용자의 요구사항을 충족하는지 중점을 두고 테스트

★ 통합테스트
: 단위테스트가 끝난 모듈을 통합하는 과정에서 발생하는 오류 및 결함을 찾는 테스트

-> 하향식 통합 테스트
: 상위 모듈 -> 하위 모듈 방향으로 통합하면서 테스트하는 기법
: 깊이 우선 통합 : 주요 제어 모듈을 중심으로 해당 모듈에 종속된 모든 모듈을 통합
: 넓이 우선 통합 : 구조의 수평을 중심으로 해당 모듈을 통합
: 절차 
==> 주요제어 모듈은 작성된 프로그램을 사용하고, 주요 모듈에 종속 모듈들은 스텁(Stub)으로 대체한다.
※ 스텁 : 제어 모듈이 호출하는 타 모듈의 기능을 단순히 수행하는 도구, 일시적으로 필요한 조건만을 가지고있는 시험용 모듈

==> 깊이 우선 또는 넓이 우선 등의 통합 방식에 따라 스텁들이 하나씩 실제 모듈과 교체
==> 모듈이 통합 될때 마다 테스트 실시
==> 새로운 오류가 발생하지 않음을 보증하기 위해서 회귀 테스트 진행

-> 상향식 통합
: 하위 모듈 -> 상위 모듈 방향으로 통합하면서 테스트
: 절차
==> 하위 모듈들을 클러스터(Cluster)로 결합한다.
==> 상위 모듈에서 데이터의 입출력을 확인하기위해 더미 모듈인 드라이버(Driver)를 작성한다.
※ 드라이버 : 테스트 대상의 하위 모듈을 호출하고, 파라미터를 전달하고, 모듈 테스트 수행 후 결과를 도출하는 도구
==> 통합된 클러스터 단위로 테스트
==> 테스트가 완료되면 클러스터는 프로그램 상위로 이동하여 결합, 드라이버는 실제 모듈로 대체










